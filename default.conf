# Simplified nginx configuration for frontend

# Connection upgrade map for WebSocket
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Upstream for API Gateway
upstream api_gateway {
    server api-gateway:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=1000r/m;

server {
    listen 80;
    server_name localhost;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Root directory
    root /usr/share/nginx/html;
    index index.html;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "Frontend OK\n";
    }

    # Debug endpoint
    location = /debug {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"ok","service":"frontend","nginx":"working"}';
    }

    # API proxy - Generic catch-all
    location ~ ^/(api|users|chat|search)/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Remove the leading part and proxy to gateway
        rewrite ^/(api|users|chat|search)/(.*) /$1/$2 break;
        proxy_pass http://api_gateway;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Connection settings
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_error;
    }

    # WebSocket endpoint
    location /ws {
        proxy_pass http://api_gateway/ws;
        
        # WebSocket headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
        
        # Disable buffering
        proxy_buffering off;
    }

    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }

    # SPA fallback - catch all other routes
    location / {
        limit_req zone=general_limit burst=50 nodelay;
        
        # Try to serve file, fallback to index.html for SPA
        try_files $uri $uri/ /index.html;
        
        # No cache for HTML
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }

    # Error page for API failures
    location @api_error {
        add_header Content-Type application/json;
        return 502 '{"error":"API temporarily unavailable","code":502}';
    }

    # Block hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}